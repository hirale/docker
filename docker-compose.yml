version: "3.8"
services:
  portainer:
    image: portainer/portainer-ce
    volumes:
      - ${DOCKER_SOCKET}:/var/run/docker.sock
      - portainer_data:/data
    container_name: portainer
    restart: unless-stopped
    networks:
      backend:
        ipv4_address: 172.20.0.2
  nginx:
    build:
      context: ./nginx
      args:
        NGINX_VERSION: ${NGINX_VERSION}
        PAGESPEED_VERSION: ${PAGESPEED_VERSION}
        LIBPNG_VERSION: ${LIBPNG_VERSION}
    container_name: nginx
    volumes:
      - ${NGINX_CONFIG}:/etc/nginx
    restart: unless-stopped
    ports:
      - 443:443
    networks:
      backend:
        ipv4_address: 172.20.0.3
    depends_on:
      - varnish
  varnish:
    image: varnish:latest
    container_name: varnish
    volumes:
      - ${VARNISH_CONFIG}:/etc/varnish
    restart: unless-stopped
    networks:
      backend:
        ipv4_address: 172.20.0.4
    depends_on:
      - apache
  apache:
    image: httpd:latest
    build:
      context: ./apache
      args:
        APACHE_VERSION: ${APACHE_VERSION}
    container_name: apache
    volumes:
      - ${WEB_ROOT}:/usr/local/apache2/htdocs
      - ${APACHE_CONFIG}:/usr/local/apache2/conf
    networks:
      backend:
        ipv4_address: 172.20.0.5
    restart: unless-stopped
    depends_on:
      - php-fpm
  php-fpm:
    build:
      context: ./php-fpm
      args:
        PHP_VERSION: ${PHP_VERSION}
    container_name: php-fpm
    volumes:
      - ${WEB_ROOT}:/usr/local/apache2/htdocs
      - ${PHP_CONFIG}:/usr/local/etc
    restart: unless-stopped
    networks:
      backend:
        ipv4_address: 172.20.0.6
    depends_on:
      - redis
      - mysql
      - memcached
  memcached:
    image: "memcached:latest"
    container_name: memcached
    restart: unless-stopped
    networks:
      backend:
        ipv4_address: 172.20.0.7
  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_ROOT_HOST=%
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - TZ=${MYSQL_TZ}
    ports:
      - 3306:3306
    volumes:
      - ${MYSQL_DATA}:/var/lib/mysql
    restart: unless-stopped
    networks:
      backend:
        ipv4_address: 172.20.0.8
  mysql8:
    image: mysql:${MYSQL8_VERSION}
    container_name: mysql8
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_ROOT_HOST=%
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - TZ=${MYSQL_TZ}
    ports:
      - 3308:3306
    volumes:
      - ${MYSQL8_DATA}:/var/lib/mysql
    restart: unless-stopped
    networks:
      backend:
        ipv4_address: 172.20.0.9
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    restart: unless-stopped
    networks:
      backend:
        ipv4_address: 172.20.0.10
  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    networks:
      backend:
        ipv4_address: 172.20.0.11
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: unless-stopped
    networks:
      backend:
        ipv4_address: 172.20.0.12
  elasticsearch:
    build:
      context: ./elasticsearch
      args:
        ELK_VERSION: ${ELK_VERSION}
    container_name: elasticsearch
    restart: unless-stopped
    volumes:
      - ${ELASTICSERACH_CONFIG}:/usr/share/elasticsearch/config/elasticsearch.yml
      - ${ELASTICSERACH_DATA}:/usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: -Xmx512m -Xms512m
    networks:
      backend:
        ipv4_address: 172.20.0.13
  ofelia:
    image: mcuadros/ofelia:latest
    container_name: ofelia
    restart: unless-stopped
    depends_on:
      - php-fpm
    volumes:
      - ${DOCKER_SOCKET}:/var/run/docker.sock:ro
      - ${OFELIA_CONFIG}:/etc/ofelia/config.ini:ro
    networks:
      backend:
        ipv4_address: 172.20.0.14
  code-server:
    image: lscr.io/linuxserver/code-server:latest
    container_name: code-server
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Rome
      - PASSWORD=${VSC_PASSWORD}
      - DEFAULT_WORKSPACE=/home/applications
    volumes:
      - /vsc:/config
      - ${WEB_ROOT}:/home/applications
    restart: unless-stopped
    networks:
      backend:
        ipv4_address: 172.20.0.15
volumes:
  portainer_data:
networks:
  backend:
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
